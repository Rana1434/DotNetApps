// <auto-generated />
using System;
using LabDal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabDal.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LabDal.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<int>("StudentToOneCompStudentKey")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.HasIndex("StudentToOneCompStudentKey");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("LabDal.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManyStudentId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfCourses")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("ManyStudentId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LabDal.ManyCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("ManyCourses");
                });

            modelBuilder.Entity("LabDal.ManyStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("ManyStudents");
                });

            modelBuilder.Entity("LabDal.Student", b =>
                {
                    b.Property<int>("StudentKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentKey"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ManyCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StudentKey");

                    b.HasIndex("ManyCourseId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LabDal.Company", b =>
                {
                    b.HasOne("LabDal.Student", "StudentToOneComp")
                        .WithMany()
                        .HasForeignKey("StudentToOneCompStudentKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentToOneComp");
                });

            modelBuilder.Entity("LabDal.Course", b =>
                {
                    b.HasOne("LabDal.ManyStudent", null)
                        .WithMany("ManyStudents")
                        .HasForeignKey("ManyStudentId");
                });

            modelBuilder.Entity("LabDal.Student", b =>
                {
                    b.HasOne("LabDal.ManyCourse", null)
                        .WithMany("ManyCourses")
                        .HasForeignKey("ManyCourseId");
                });

            modelBuilder.Entity("LabDal.ManyCourse", b =>
                {
                    b.Navigation("ManyCourses");
                });

            modelBuilder.Entity("LabDal.ManyStudent", b =>
                {
                    b.Navigation("ManyStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
